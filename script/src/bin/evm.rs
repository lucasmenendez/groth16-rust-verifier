//! An end-to-end example of using the SP1 SDK to generate a proof of a program that can have an
//! EVM-Compatible proof generated which can be verified on-chain.
//!
//! You can run this script using the following command:
//! ```shell
//! RUST_LOG=info cargo run --release --bin evm -- --system groth16
//! ```
//! or
//! ```shell
//! RUST_LOG=info cargo run --release --bin evm -- --system plonk
//! ```
//! 
//! Inputs example:
//! --vk '{"protocol":"groth16","curve":"bn128","nPublic":8,"vk_alpha_1":["20491192805390485299153009773594534940189261866228447918068658471970481763042","9383485363053290200918347156157836566562967994039712273449902621266178545958","1"],"vk_beta_2":[["6375614351688725206403948262868962793625744043794305715222011528459656738731","4252822878758300859123897981450591353533073413197771768651442665752259397132"],["10505242626370262277552901082094356697409835680220590971873171140371331206856","21847035105528745403288232691147584728191162732299865338377159692350059136679"],["1","0"]],"vk_gamma_2":[["10857046999023057135944570762232829481370756359578518086990519993285655852781","11559732032986387107991004021392285783925812861821192530917403151452391805634"],["8495653923123431417604973247489272438418190587263600148770280649306958101930","4082367875863433681332203403145435568316851327593401208105741076214120093531"],["1","0"]],"vk_delta_2":[["21010278801550076070594712261484029379168227304868159362296668511164736845828","14325073694401515729942973423646460681684934304555818734650023403938912095939"],["9970403792699087274109804084280681439104355883492356582075503727163639540438","17385172697844618240788327867911689912018006163861995522101126773185151301375"],["1","0"]],"vk_alphabeta_12":[[["2029413683389138792403550203267699914886160938906632433982220835551125967885","21072700047562757817161031222997517981543347628379360635925549008442030252106"],["5940354580057074848093997050200682056184807770593307860589430076672439820312","12156638873931618554171829126792193045421052652279363021382169897324752428276"],["7898200236362823042373859371574133993780991612861777490112507062703164551277","7074218545237549455313236346927434013100842096812539264420499035217050630853"]],[["7077479683546002997211712695946002074877511277312570035766170199895071832130","10093483419865920389913245021038182291233451549023025229112148274109565435465"],["4595479056700221319381530156280926371456704509942304414423590385166031118820","19831328484489333784475432780421641293929726139240675179672856274388269393268"],["11934129596455521040620786944827826205713621633706285934057045369193958244500","8037395052364110730298837004334506829870972346962140206007064471173334027475"]]],"IC":[["21695967393052505367467321873288870040487467149708728517702529968410486955902","5940449173712729765028878115194606409236300585311598018353566841918242161415","1"],["6698053902346521146410413756721643144786030011158466843109543130971438682747","10292764875490243957325132471403899630925482101541055556164988673389951230395","1"],["597476498227955919488995611722870008534581381310481433765047969448961329080","12325879638190358626404492485595215986231390657108973054127871928432258217617","1"],["4791140527447430280165384025614437004807487354011245781981683500793751073828","13702545735841317387866976121580921045614128193210000025102268309173266202748","1"],["21885304446672575887682463550627741752607711631147688464993730141785489902244","7766419206115037213298283763015059148314049598589626384948496034727584024851","1"],["10564699026548983649348775019031721650260252030945298688402561695073522103820","7461936476320521024169125569757616913149276430607872827052300605958892856540","1"],["7318485032616777691699074077176133642058892792823406651859611910408178180890","12225843286791911363062838367563203981415888872690333511551791321934893472949","1"],["8218143369540552951061279830061011534901163898876818665274506905857448163669","19852206532181764805885806064489840410886814296877758442226977887235138568151","1"],["12797535309053304268021151336439007893156698876038110657581597013416865780225","5301588456713559437752663159833188300846358663389943103714156654056191353274","1"]]}'
//! --proof '{"pi_a":["11807645779041664161513478240627781211197526287262277708924988326158576597101","848367245384673708196873502590003267288831122203508373635783882858781223774","1"],"pi_b":[["17508819882886695939136301422401861481523600878684592345497261215169379735271","15546916660572083828273607168698535120477506535681071476848110674479861327897"],["16859834907958680314274131921565027967490487092672407069191460526397587820114","2257929509638288003504117018970671502051693297174874565474627924247782307522"],["1","0"]],"pi_c":["19953078891782037475354072457627253411629881577421385657147123169092584768210","15096666811385163483916554875893221487433136870057294167390057249238273424245","1"],"protocol":"groth16","curve":"bn128"}'
//! --inputs '["145316759337528441495510310784032294629","43024962816948008944460698519398886735","15184009969780319387073492628750412410461704760830692218996058993166641313350","10","268344929042543964910687927949264512041","64209762645882749684093135069400584830","12594952229585488218998313752558508651260145099689510101960298189953978452871","6055010689094864549191283671062031213672624731117702807749353500116061944181"]'

use alloy_sol_types::SolType;
use clap::{Parser, ValueEnum};
use serde::{Deserialize, Serialize};
use sp1_sdk::{HashableKey, ProverClient, SP1ProofWithPublicValues, SP1Stdin, SP1VerifyingKey};
use std::path::PathBuf;

/// The ELF (executable and linkable format) file for the Succinct RISC-V zkVM.
pub const ELF: &[u8] = include_bytes!("../../../elf/riscv32im-succinct-zkvm-elf");

/// The arguments for the EVM command.
#[derive(Parser, Debug)]
#[clap(author, version, about, long_about = None)]
struct EVMArgs {
    #[clap(long)]
    vk: String,

    #[clap(long)]
    proof: String,

    #[clap(long)]
    inputs: String,

    #[clap(long, value_enum, default_value = "groth16")]
    system: ProofSystem,
}

/// Enum representing the available proof systems
#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, ValueEnum, Debug)]
enum ProofSystem {
    Plonk,
    Groth16,
}

/// A fixture that can be used to test the verification of SP1 zkVM proofs inside Solidity.
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
struct SP1Groth16VerifierProofFixture {
    is_valid: bool,
    vkey: String,
    proof: String,
}

fn main() {
    // Setup the logger.
    sp1_sdk::utils::setup_logger();
    // Parse the command line arguments.
    let args = EVMArgs::parse();
    // Setup the prover client.
    let client = ProverClient::new();
    // Setup the program.
    let (pk, vk) = client.setup(ELF);
    // Setup the inputs.
    let mut stdin = SP1Stdin::new();
    stdin.write(&args.vk);
    stdin.write(&args.proof);
    stdin.write(&args.inputs);
    println!("Proof System: {:?}", args.system);
    // Generate the proof based on the selected proof system.
    let proof = match args.system {
        ProofSystem::Plonk => client.prove(&pk, stdin).plonk().run(),
        ProofSystem::Groth16 => client.prove(&pk, stdin).groth16().run(),
    }
    .expect("failed to generate proof");
    create_proof_fixture(proof, &vk, args.system);
}

/// Create a fixture for the given proof.
fn create_proof_fixture(
    mut proof: SP1ProofWithPublicValues,
    vk: &SP1VerifyingKey,
    system: ProofSystem,
) {
    // Deserialize the public values.
    let is_valid = proof.public_values.read::<bool>();
    // Create the testing fixture so we can test things end-to-end.
    let fixture = SP1Groth16VerifierProofFixture {
        is_valid,
        vkey: vk.bytes32().to_string(),
        proof: format!("0x{}", hex::encode(proof.bytes())),
    };
    // The verification key is used to verify that the proof corresponds to the execution of the
    // program on the given input.
    //
    // Note that the verification key stays the same regardless of the input.
    println!("Verification Key: {}", fixture.vkey);
    // The proof proves to the verifier that the program was executed with some inputs that led to
    // the give public values.
    println!("Proof Bytes: {}", fixture.proof);
    // Save the fixture to a file.
    let fixture_path = PathBuf::from(env!("CARGO_MANIFEST_DIR")).join("../contracts/src/fixtures");
    std::fs::create_dir_all(&fixture_path).expect("failed to create fixture path");
    std::fs::write(
        fixture_path.join(format!("{:?}-fixture.json", system).to_lowercase()),
        serde_json::to_string_pretty(&fixture).unwrap(),
    )
    .expect("failed to write fixture");
}